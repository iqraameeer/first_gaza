import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:lottie/lottie.dart';
import 'package:responsive_sizer/responsive_sizer.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../../api_services/GraphQLService.dart';
import '../../api_services/registartion_api.dart';
import '../../model/registration_model.dart';
import '../../utils/week_content_list.dart';
import '../notificationServices/notification.dart';

class HomeController extends GetxController {
  var selectedWeek = 0.obs;
  var hasReceivedNotificationForToday = false.obs;
  var pregWeekNotifier = ValueNotifier<bool>(false);
  var childWeekNotifier = ValueNotifier<bool>(false);
  var selectedPregnancyWeekNumber = 0.obs;
  var selectedChildWeekNumber = 0.obs;
  var pregnancyWeek = 0.obs;
  var isPregnancyWeekSelected = false.obs;
  var isChildWeekSelected = false.obs;
  var isDelivered = false.obs;
  var isLoading = true.obs;
  var currentWeek = 0.obs;
  var registrationWeekIndex = 0.obs;
  int pregnancyIdBase = 1000;
  int childIdBase = 2000;
  final List<int> daysToShow = [1, 3, 5];
  late DateTime registrationDate;
  late DateTime deliveryDate;
  late NotificationService _notificationService;
  late RegistrationAPI apiServices;
  RegistrationModel? registrationModel;
  var _justShownCustomDialog = false;

  @override
  void onInit() {
    super.onInit();
    print('üöÄ HomeController: onInit started');
    final client = GraphQLConfig.clientNotifier.value;
    apiServices = RegistrationAPI(client);
    registrationDate = DateTime.now();
    deliveryDate = DateTime.now();
    _notificationService = NotificationService();
    print(
        'üì° Initialized: GraphQL client, RegistrationAPI, NotificationService');
    loadInitialData();
    pregWeekNotifier.addListener(() {
      print('üîî pregWeekNotifier triggered');
      update();
    });
    print('‚úÖ HomeController: onInit completed');
  }

  Future<void> loadInitialData() async {
    print('üì• loadInitialData: Started');
    isLoading.value = true;
    SharedPreferences prefs = await SharedPreferences.getInstance();
    pregnancyWeek.value = prefs.getInt('pregnancyWeek') ?? 0;
    selectedPregnancyWeekNumber.value =
        prefs.getInt('selectedPregnancyWeekNumber') ?? 0;
    selectedChildWeekNumber.value =
        prefs.getInt('selectedChildWeekNumber') ?? 0;
    isChildWeekSelected.value = prefs.getBool('isChildWeekSelected') ?? false;
    isPregnancyWeekSelected.value =
        prefs.getBool('isPregnancyWeekSelected') ?? false;
    isDelivered.value = prefs.getBool('isDelivered') ?? false;
    int? registrationDateEpoch = prefs.getInt('registrationDateEpoch');
    if (registrationDateEpoch != null) {
      registrationDate =
          DateTime.fromMillisecondsSinceEpoch(registrationDateEpoch);
    }
    int? deliveryDateEpoch = prefs.getInt('deliveryDateEpoch');
    if (deliveryDateEpoch != null) {
      deliveryDate = DateTime.fromMillisecondsSinceEpoch(deliveryDateEpoch);
    }

    print('üìã SharedPreferences Loaded:');
    print('  pregnancyWeek: ${pregnancyWeek.value}');
    print('  registrationWeekIndex: ${pregnancyWeek.value - 35}');
    print('  isDelivered: ${isDelivered.value}');
    print('  registrationDate: ${registrationDate.toLocal()}');
    print('  deliveryDate: ${deliveryDate.toLocal()}');
    print('  hasShownPostLoginDialog: ${await _hasShownPostLoginDialog()}');
    print('  hasVisitedWeek35: ${await _hasVisitedWeek35()}');
    print('  hasVisitedWeek3: ${await _hasVisitedWeek3()}');
    print(
        '  hasShownCongratulationDialog: ${await _hasShownCongratulationDialog()}');

    await fetchUserFromAPI();

    if (pregnancyWeek.value != 0) {
      print('üßÆ Computing weeks...');
      computeWeeks();
    } else {
      print(
          '‚ö†Ô∏è Pregnancy week is still 0 after loading from SharedPreferences');
    }

    print('üîç After computeWeeks:');
    print('  currentWeek: ${currentWeek.value}');
    print('  registrationWeekIndex: ${registrationWeekIndex.value}');
    print('  selectedWeek: ${selectedWeek.value}');

    if (currentWeek.value < weeksContent.length) {
      bool hasVisitedWeek35 = await _hasVisitedWeek35();
      bool hasShownCongratulationDialog = await _hasShownCongratulationDialog();

      // Set the selected week based on delivery status
      if (isDelivered.value) {
        selectedWeek.value = currentWeek.value;
        print('üöö Delivered ${currentWeek.value}');
        updateWeekSelectionLogic(currentWeek.value);
      } else {
        selectedWeek.value = registrationWeekIndex.value;
        print(
            'ü§∞ Not Delivered: Setting selectedWeek to registrationWeekIndex: ${registrationWeekIndex.value}');
        updateWeekSelectionLogic(registrationWeekIndex.value);
      }

      // Show custom dialog only for pregnancy weeks 36 or 37, explicitly exclude week 35
      if ((registrationWeekIndex.value == 1 ||
              registrationWeekIndex.value == 2) &&
          registrationWeekIndex.value != 0 &&
          !hasVisitedWeek35 &&
          !_justShownCustomDialog) {
        print(
            'üì¢ Showing custom dialog for pregnancy week: ${35 + registrationWeekIndex.value}');
        _justShownCustomDialog = true;
        showCustomDialog(selectedWeek.value, (newWeek) {
          print(
              'üì≤ Dialog callback: Navigating to week 35 (newWeek: $newWeek)');
          selectedWeek.value = 0; // Navigate to week 35
          _saveSelectedWeek();
          _justShownCustomDialog = false;
          _setWeek35Visited();
        });
      } else if (isDelivered.value &&
          selectedChildWeekNumber.value == 1 &&
          !hasShownCongratulationDialog) {
        print('üéâ Triggering congratulation dialog for 1st child week');
        _showCongratulationDialog((week) {
          print('üéâ Congratulation dialog callback: Continuing to week: $week');
          _setCongratulationDialogShown();
          selectedWeek.value = currentWeek.value;
          _saveSelectedWeek();
          update();
          _notificationService.handleWeekTransition(
            isDelivered.value,
            selectedPregnancyWeekNumber.value,
            selectedChildWeekNumber.value,
          );
        });
      } else {
        print('üîÑ Proceeding with week selection: ${selectedWeek.value}');
        _proceedWithWeekSelection(selectedWeek.value);
      }
    } else {
      print('‚ö†Ô∏è Current week exceeds content length: ${currentWeek.value}');
    }

    if (!hasReceivedNotificationForToday.value) {
      print('üîî Sending notification for today');
      await _notificationService.handleWeekTransition(
        isDelivered.value,
        selectedPregnancyWeekNumber.value,
        selectedChildWeekNumber.value,
      );
      hasReceivedNotificationForToday.value = true;
    }

    isLoading.value = false;
    print('‚úÖ loadInitialData: Completed');
  }

  Future<void> fetchUserFromAPI() async {
    print('üåê fetchUserFromAPI: Started');
    registrationModel = await apiServices.fetchUserData();
    if (registrationModel != null) {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      pregnancyWeek.value = registrationModel!.weekBefore;
      isDelivered.value = registrationModel!.isDelivered;
      registrationDate = registrationModel!.createdAt;

      if (isDelivered.value) {
        deliveryDate = registrationModel!.deliveryDate ?? registrationDate;
        print(
            'üöö Delivery status: Delivered, setting deliveryDate: ${deliveryDate.toLocal()}');
      } else {
        deliveryDate = registrationDate
            .add(Duration(days: (40 - pregnancyWeek.value) * 7));
        print(
            'ü§∞ Delivery status: Not delivered, calculated deliveryDate: ${deliveryDate.toLocal()}');
      }

      await prefs.setInt('pregnancyWeek', pregnancyWeek.value);
      await prefs.setBool('isDelivered', isDelivered.value);
      await prefs.setInt(
          'registrationDateEpoch', registrationDate.millisecondsSinceEpoch);
      await prefs.setInt(
          'deliveryDateEpoch', deliveryDate.millisecondsSinceEpoch);
      print('‚úÖ API User: ${registrationModel!.fullName}');
      print('üìÜ Registered On: ${registrationDate.toLocal()}');
      print('üë∂ Pregnancy Week At Registration: $pregnancyWeek');
      print('üöö Delivered? ${isDelivered.value ? "Yes" : "No"}');
      print('üìÖ Delivery Date: ${deliveryDate.toLocal()}');
      print(
          'üîî API Delivery Date: ${registrationModel!.deliveryDate?.toLocal() ?? "null"}');
    } else {
      print('‚ùå fetchUserFromAPI: Failed to load user data');
    }
    print('üåê fetchUserFromAPI: Completed');
  }

  void computeWeeks() {
    print('üßÆ computeWeeks: Started');
    DateTime today = DateTime.now();
    registrationWeekIndex.value = pregnancyWeek.value - 35;

    if (!isDelivered.value) {
      int daysSinceRegistration = today.difference(registrationDate).inDays;
      currentWeek.value =
          registrationWeekIndex.value + (daysSinceRegistration ~/ 7);
      if (currentWeek.value < registrationWeekIndex.value) {
        currentWeek.value = registrationWeekIndex.value;
        print(
            '‚ö†Ô∏è Adjusted currentWeek to registrationWeekIndex: ${currentWeek.value}');
      }
    } else {
      int daysSinceDelivery = today.difference(deliveryDate).inDays;
      int weeksSinceDelivery = daysSinceDelivery ~/ 7;
      currentWeek.value = 2 + weeksSinceDelivery;
      if (currentWeek.value < 3) {
        currentWeek.value = 3;
        print(
            '‚ö†Ô∏è Adjusted currentWeek to minimum child week: ${currentWeek.value}');
      }
      selectedChildWeekNumber.value = weeksSinceDelivery + 1;
    }

    if (currentWeek.value >= weeksContent.length) {
      currentWeek.value = weeksContent.length - 1;
      print(
          '‚ö†Ô∏è Capped currentWeek to max content length: ${currentWeek.value}');
    }

    print('üóìÔ∏è Registration Date: ${registrationDate.toLocal()}');
    print('üìÖ Today: ${today.toLocal()}');
    print('üî¢ Current Week: ${currentWeek.value}');
    print('üè∑Ô∏è Registration Week Index: ${registrationWeekIndex.value}');
    print('üìÖ Delivery Date: ${deliveryDate.toLocal()}');
    print('üë∂ Child Week Number: ${selectedChildWeekNumber.value}');
    print('üßÆ computeWeeks: Completed');
  }

  List<int> getSelectableWeeks() {
    print('üìã getSelectableWeeks: Started');
    List<int> selectableWeeks;
    if (isDelivered.value) {
      selectableWeeks = List.generate(
          (currentWeek.value + 1).clamp(0, weeksContent.length),
          (index) => index);
      print('üöö Delivered: Selectable weeks: $selectableWeeks');
    } else {
      selectableWeeks = List.generate(
          (registrationWeekIndex.value + 1).clamp(0, 3), (index) => index);
      print('ü§∞ Not Delivered: Selectable weeks: $selectableWeeks');
    }
    print('üìã getSelectableWeeks: Completed');
    return selectableWeeks;
  }

  void updateWeekSelectionLogic(int weekIndex) {
    print('üîÑ updateWeekSelectionLogic: Started with weekIndex: $weekIndex');
    if (weekIndex < 3) {
      isPregnancyWeekSelected.value = true;
      isChildWeekSelected.value = false;
      selectedPregnancyWeekNumber.value = 35 + weekIndex;
      selectedChildWeekNumber.value = 0;
      print('ü§∞ Selected Pregnancy Week: ${selectedPregnancyWeekNumber.value}');
    } else {
      isChildWeekSelected.value = true;
      isPregnancyWeekSelected.value = false;
      selectedChildWeekNumber.value = weekIndex - 2;
      selectedPregnancyWeekNumber.value = 0;
      print('üë∂ Selected Child Week: ${selectedChildWeekNumber.value}');
    }
    print('üîÑ updateWeekSelectionLogic: Completed');
  }

  Future<void> _saveSelectedWeek() async {
    print('üíæ _saveSelectedWeek: Started');
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setInt(
        'selectedPregnancyWeekNumber', selectedPregnancyWeekNumber.value);
    await prefs.setInt(
        'selectedChildWeekNumber', selectedChildWeekNumber.value);
    await prefs.setBool(
        'isPregnancyWeekSelected', isPregnancyWeekSelected.value);
    await prefs.setBool('isChildWeekSelected', isChildWeekSelected.value);
    await prefs.setBool('isDelivered', isDelivered.value);
    await prefs.setInt('pregnancyWeek', pregnancyWeek.value);
    await prefs.setInt(
        'currentEpochDate', DateTime.now().millisecondsSinceEpoch);
    await prefs.setInt(
        'registrationDateEpoch', registrationDate.millisecondsSinceEpoch);
    await prefs.setInt(
        'deliveryDateEpoch', deliveryDate.millisecondsSinceEpoch);
    if (selectedWeek.value == 0) {
      await prefs.setBool('hasVisitedWeek35', true);
      print('üìå Marked week 35 as visited');
    }
    print(
        'üíæ Saved: pregnancyWeek=${pregnancyWeek.value}, selectedWeek=${selectedWeek.value}');
    print('üíæ _saveSelectedWeek: Completed');
  }

  Future<bool> _hasShownCongratulationDialog() async {
    print('üîç _hasShownCongratulationDialog: Checking');
    SharedPreferences prefs = await SharedPreferences.getInstance();
    bool result = prefs.getBool('hasShownCongratulationDialog') ?? false;
    print('üîç _hasShownCongratulationDialog: Result: $result');
    return result;
  }

  Future<void> _setCongratulationDialogShown() async {
    print('üìå _setCongratulationDialogShown: Setting flag');
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setBool('hasShownCongratulationDialog', true);
    print('üìå _setCongratulationDialogShown: Completed');
  }

  Future<bool> _hasShownPostLoginDialog() async {
    print('üîç _hasShownPostLoginDialog: Checking');
    SharedPreferences prefs = await SharedPreferences.getInstance();
    bool result = prefs.getBool('hasShownPostLoginDialog') ?? false;
    print('üîç _hasShownPostLoginDialog: Result: $result');
    return result;
  }

  Future<bool> _hasVisitedWeek35() async {
    print('üîç _hasVisitedWeek35: Checking');
    SharedPreferences prefs = await SharedPreferences.getInstance();
    bool visited = prefs.getBool('hasVisitedWeek35') ?? false;
    print('üîç _hasVisitedWeek35: Result: $visited');
    return visited;
  }

  Future<void> _setWeek35Visited() async {
    print('üìå _setWeek35Visited: Setting flag');
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setBool('hasVisitedWeek35', true);
    print('üìå _setWeek35Visited: Completed');
  }

  Future<bool> _hasVisitedWeek3() async {
    print('üîç _hasVisitedWeek3: Checking');
    SharedPreferences prefs = await SharedPreferences.getInstance();
    bool result = prefs.getBool('hasVisitedWeek3') ?? false;
    print('üîç _hasVisitedWeek3: Result: $result');
    return result;
  }

  Future<void> resetPostLoginDialog() async {
    print('üîÑ resetPostLoginDialog: Started');
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setBool('hasShownPostLoginDialog', false);
    print('üîÑ resetPostLoginDialog: Completed');
  }

  Future<void> resetWeek35Visit() async {
    print('üîÑ resetWeek35Visit: Started');
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setBool('hasVisitedWeek35', false);
    print('üîÑ resetWeek35Visit: Completed');
  }

  Future<void> resetWeek3Visit() async {
    print('üîÑ resetWeek3Visit: Started');
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setBool('hasVisitedWeek3', false);
    print('üîÑ resetWeek3Visit: Completed');
  }

  Future<void> resetCongratulationDialog() async {
    print('üîÑ resetCongratulationDialog: Started');
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setBool('hasShownCongratulationDialog', false);
    print('üîÑ resetCongratulationDialog: Completed');
  }

  bool isWeekSelectable(int weekIndex) {
    print('üîé isWeekSelectable: Checking weekIndex: $weekIndex');
    bool selectable;
    if (!isDelivered.value) {
      selectable = weekIndex <= registrationWeekIndex.value;
      print(
          'ü§∞ Not Delivered: weekIndex $weekIndex is ${selectable ? "selectable" : "not selectable"} (registrationWeekIndex: ${registrationWeekIndex.value})');
    } else {
      selectable = weekIndex <= currentWeek.value;
      print(
          'üöö Delivered: weekIndex $weekIndex is ${selectable ? "selectable" : "not selectable"} (currentWeek: ${currentWeek.value})');
    }
    return selectable;
  }

  void updateSelectedWeek(int weekIndex) async {
    print('üîç updateSelectedWeek: Attempting to select week: $weekIndex');
    if (isWeekSelectable(weekIndex)) {
      print('‚úÖ Week $weekIndex is selectable');
      _justShownCustomDialog = false;
      await _proceedWithWeekSelection(weekIndex);
    } else {
      print(
          'üö´ Week $weekIndex not selectable (currentWeek: ${currentWeek.value})');
    }
  }

  void _showCongratulationDialog(Function(int) onContinue) {
    print('üéâ _showCongratulationDialog: Showing dialog');
    Get.dialog(
      _FadeDialog(
        onContinue: onContinue,
      ),
      barrierDismissible: false,
      barrierColor: Colors.black54,
    );
    print('üéâ _showCongratulationDialog: Dialog displayed');
  }

  Future<void> _proceedWithWeekSelection(int weekIndex) async {
    print('üîÑ _proceedWithWeekSelection: Started with weekIndex: $weekIndex');
    updateWeekSelectionLogic(weekIndex);
    selectedWeek.value = weekIndex;
    print('‚≠ê Set selectedWeek to: $weekIndex');
    await _saveSelectedWeek();
    update();

    bool hasShownCongratulationDialog = await _hasShownCongratulationDialog();

    if (isDelivered.value && selectedChildWeekNumber.value == 1) {
      if (!hasShownCongratulationDialog) {
        print('üéâ Triggering congratulation dialog for child week 1');
        _showCongratulationDialog((week) {
          print('üéâ Congratulation dialog callback: Continuing to week: $week');
          _setCongratulationDialogShown();
          selectedWeek.value = weekIndex;
          _saveSelectedWeek();
          update();
          _notificationService.handleWeekTransition(
            isDelivered.value,
            selectedPregnancyWeekNumber.value,
            selectedChildWeekNumber.value,
          );
        });
        return;
      }
    }

    print('üîî Triggering notification for week transition');
    _notificationService.handleWeekTransition(
      isDelivered.value,
      selectedPregnancyWeekNumber.value,
      selectedChildWeekNumber.value,
    );
    print('‚≠ê Selected Week: $weekIndex');
    print('üìÜ Current Week: ${currentWeek.value}');
    print('üîÑ _proceedWithWeekSelection: Completed');
  }

  List<Color> get gradientColors {
    print('üé® get gradientColors: Started');
    List<Color> colors;
    if (isPregnancyWeekSelected.value) {
      if (selectedPregnancyWeekNumber.value == 35 ||
          selectedPregnancyWeekNumber.value == 36) {
        colors = [const Color(0xFFD8E8F7), const Color(0xFF2391C9)];
        print('üé® Pregnancy Week 35/36: Colors set to blue gradient');
      } else if (selectedPregnancyWeekNumber.value == 37) {
        colors = [const Color(0xFFEFD8F7), const Color(0xFFCA52CC)];
        print('üé® Pregnancy Week 37: Colors set to purple gradient');
      } else {
        colors = [const Color(0xFFD8E8F7), const Color(0xFF2391C9)];
        print('üé® Default Pregnancy: Colors set to blue gradient');
      }
    } else {
      if (selectedChildWeekNumber.value >= 25 &&
          selectedChildWeekNumber.value <= 48) {
        colors = [const Color(0xFFD8F7DA), const Color(0xFF4EA51B)];
        print('üé® Child Week 25-48: Colors set to green gradient');
      } else {
        colors = [const Color(0xFFF7DAD8), const Color(0xFFC95F23)];
        print('üé® Default Child Week: Colors set to orange gradient');
      }
    }
    print('üé® get gradientColors: Completed with colors: $colors');
    return colors;
  }

  String get imagePath {
    print('üñºÔ∏è get imagePath: Started');
    String path;
    if (isPregnancyWeekSelected.value) {
      if (selectedPregnancyWeekNumber.value == 37) {
        path = 'assets/images/delivery_37.png';
        print('üñºÔ∏è Pregnancy Week 37: Image set to delivery_37.png');
      } else {
        path = 'assets/images/Group-2614.png';
        print('üñºÔ∏è Default Pregnancy: Image set to Group-2614.png');
      }
    } else {
      if (selectedChildWeekNumber.value >= 25 &&
          selectedChildWeekNumber.value <= 48) {
        path = 'assets/images/complimentary_feeding.png';
        print('üñºÔ∏è Child Week 25-48: Image set to complimentary_feeding.png');
      } else {
        path = 'assets/images/child_week.png';
        print('üñºÔ∏è Default Child Week: Image set to child_week.png');
      }
    }
    print('üñºÔ∏è get imagePath: Completed with path: $path');
    return path;
  }

  Object getWeekContent() {
    print(
        'üìñ getWeekContent: Started with selectedWeek: ${selectedWeek.value}');
    if (selectedWeek.value >= 0 && selectedWeek.value < weeksContent.length) {
      print('üìñ Returning content for week: ${selectedWeek.value}');
      return weeksContent[selectedWeek.value];
    }
    print('‚ö†Ô∏è No content available for week: ${selectedWeek.value}');
    return "⁄©Ÿàÿ¶€å ŸÖŸàÿßÿØ ÿØÿ≥ÿ™€åÿßÿ® ŸÜ€Å€å⁄∫";
  }

  @override
  void onClose() {
    print('üõë HomeController: onClose started');
    pregWeekNotifier.dispose();
    childWeekNotifier.dispose();
    print('üóëÔ∏è Disposed: pregWeekNotifier, childWeekNotifier');
    super.onClose();
    print('üõë HomeController: onClose completed');
  }
}

class _FadeDialog extends StatefulWidget {
  final Function(int) onContinue;

  const _FadeDialog({required this.onContinue});

  @override
  _FadeDialogState createState() => _FadeDialogState();
}

class _FadeDialogState extends State<_FadeDialog>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _fadeAnimation;

  @override
  void initState() {
    super.initState();
    print('üé¨ _FadeDialogState: initState started');
    _controller = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _controller, curve: Curves.easeInOut),
    );

    _controller.forward();
    print('üé¨ _FadeDialogState: Animation started');
    Future.delayed(const Duration(seconds: 3), () {
      if (mounted && Get.isDialogOpen == true) {
        print('üé¨ _FadeDialogState: Reversing animation and closing dialog');
        _controller.reverse().then((_) {
          Get.back();
          widget.onContinue(1);
          print(
              'üé¨ _FadeDialogState: Dialog closed, callback triggered with week 1');
        });
      }
    });
  }

  @override
  void dispose() {
    print('üóëÔ∏è _FadeDialogState: dispose started');
    _controller.dispose();
    print('üóëÔ∏è _FadeDialogState: AnimationController disposed');
    super.dispose();
    print('üóëÔ∏è _FadeDialogState: dispose completed');
  }

  @override
  Widget build(BuildContext context) {
    print('üõ†Ô∏è _FadeDialogState: Building dialog');
    return FadeTransition(
      opacity: _fadeAnimation,
      child: Dialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(25),
        ),
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Lottie.asset(
                'assets/animation/cong.json',
                width: 150,
                height: 150,
                fit: BoxFit.contain,
              ),
              const SizedBox(height: 16),
              const Text(
                'Ÿàÿß€Å! ÿ¢Ÿæ ŸÜ€í 37 €ÅŸÅÿ™Ÿà⁄∫ ⁄©ÿß ÿ≥ŸÅÿ± ŸÖ⁄©ŸÖŸÑ ⁄©ÿ± ŸÑ€åÿß! üéâ',
                style: TextStyle(
                  fontSize: 22,
                  fontWeight: FontWeight.bold,
                  color: Colors.purple,
                  fontFamily: 'AlQalamTajNastaleeqRegular',
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 16),
              const Text(
                'üéä ŸÜŸÜ⁄æ€í ŸÖ€ÅŸÖÿßŸÜ ⁄©€å ÿ¢ŸÖÿØ Ÿæÿ± ÿ¢Ÿæ ⁄©Ÿà ÿØŸÑ€å ŸÖÿ®ÿßÿ±⁄©ÿ®ÿßÿØ!',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.purple,
                  fontFamily: 'AlQalamTajNastaleeqRegular',
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

void showCustomDialog(int currentWeekIndex, Function(int) onContinue,
    {bool isNewRegistration = false}) {
  print(
      'üì¢ showCustomDialog: Started with currentWeekIndex: $currentWeekIndex, isNewRegistration: $isNewRegistration');
  if (!Get.isDialogOpen!) {
    print('üì¢ showCustomDialog: Displaying dialog');
    Get.dialog(
      Dialog(
        backgroundColor: Colors.white,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(15),
        ),
        child: Container(
          width: double.infinity,
          constraints: BoxConstraints(
            minHeight: 30.h,
          ),
          child: Stack(
            clipBehavior: Clip.none,
            alignment: Alignment.topCenter,
            children: [
              Container(
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(15),
                ),
                width: double.infinity,
                padding: const EdgeInsets.all(20),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    const SizedBox(height: 30),
                    const Text(
                      '!ÿ±⁄©ÿ¶€å€í',
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        fontSize: 22,
                        fontFamily: 'AlQalamTajNastaleeqRegular',
                        color: Colors.black87,
                        height: 1.5,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 10),
                    const Text(
                      'ÿ¢ÿ¨ ⁄©ÿß Ÿæ€åÿ∫ÿßŸÖ Ÿæ⁄ë⁄æŸÜ€í ÿ≥€í Ÿæ€ÅŸÑ€í Ÿæ⁄Ü⁄æŸÑ€í Ÿæ€åÿ∫ÿßŸÖÿßÿ™ ⁄©Ÿà Ÿæ⁄ë⁄æ€å⁄∫ ÿ™ÿß⁄©€Å\n ÿ®⁄Ü€í ÿßŸàÿ± ÿ¢Ÿæ ⁄©€å ÿµÿ≠ÿ™ ÿ≥€í ŸÖÿ™ÿπŸÑŸÇ ÿ∂ÿ±Ÿàÿ±€å ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ™⁄©\n ÿ¢Ÿæ ⁄©€å ŸÖ⁄©ŸÖŸÑ ÿ±ÿ≥ÿßÿ¶€å ŸÖŸÖ⁄©ŸÜ €ÅŸà ÿ≥⁄©€í€î',
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        fontSize: 18,
                        fontFamily: 'AlQalamTajNastaleeqRegular',
                        color: Colors.black87,
                        height: 1.5,
                      ),
                    ),
                    const SizedBox(height: 10),
                    const Text(
                      'ÿ¢Ÿæ ⁄©€í ÿ™ÿπÿßŸàŸÜ ÿßŸàÿ± ŸàŸÇÿ™ ⁄©ÿß ÿ®€í ÿ≠ÿØ ÿ¥⁄©ÿ±€å€Å€î',
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        fontSize: 18,
                        fontFamily: 'AlQalamTajNastaleeqRegular',
                        color: Colors.black87,
                        height: 1.5,
                      ),
                    ),
                    const SizedBox(height: 30),
                    Center(
                      child: SizedBox(
                        width: double.infinity,
                        child: ElevatedButton(
                          onPressed: () {
                            print(
                                'üì¢ showCustomDialog: Button pressed, closing dialog');
                            Get.back();
                            final controller = Get.find<HomeController>();
                            controller.updateSelectedWeek(0);
                            onContinue(0);
                            print('üì¢ showCustomDialog');
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFF0281C1),
                            padding: const EdgeInsets.symmetric(vertical: 12),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          child: const Text(
                            'Ÿæ⁄Ü⁄æŸÑ€í Ÿæ€åÿ∫ÿßŸÖÿßÿ™',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                              fontFamily: 'AlQalamTajNastaleeqRegular',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              Positioned(
                top: -35,
                child: Container(
                  height: 80,
                  width: 80,
                  padding: const EdgeInsets.all(4),
                  decoration: const BoxDecoration(
                    shape: BoxShape.circle,
                    color: Colors.white,
                  ),
                  child: const Icon(
                    Icons.info,
                    color: Color(0xFF0281C1),
                    size: 70,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
      barrierDismissible: false,
    );
    print('üì¢ showCustomDialog: Dialog displayed');
  } else {
    print('üì¢ showCustomDialog: Dialog already open, skipping');
  }
}
